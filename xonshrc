# Exports
$EDITOR = "kak"
$VISUAL = "kak"
$PATH = [
    "$HOME/.scripts",
    "$HOME/.local/bin",
    "/usr/games",
    "/usr/local/sbin",
    "/usr/local/bin",
    "/usr/sbin",
    "/usr/bin",
    "/sbin",
    "/bin",
]
$TERM = "screen-256color"
$LANG = "en_US.UTF-8"
$PYTHONSTARTUP = "~/.pythonrc"

# OSX
if $(uname).strip() == "Darwin":
    # GNU
    $PATH = $(/bin/ls -d /usr/local/opt/*/libexec/gnubin).splitlines() + $PATH
    $MANPATH = $(/bin/ls -d /usr/local/opt/*/libexec/gnuman).splitlines() + $(manpath).strip().split(":")
    # Python
    $PATH = $(/bin/ls -d /usr/local/opt/python@*/bin).splitlines() + $PATH
    aliases["coffee"] = "caffeinate -disu"

# Aliases
aliases["ls"] = "ls --color=auto"
aliases["grep"] = "grep --color=auto"
aliases["l"] = "ls -lah"

# FZF
if !(which fzf):
    if !(which ag):
        $FZF_DEFAULT_COMMAND = "ag -g ''"
        $FZF_CTRL_T_COMMAND = $FZF_DEFAULT_COMMAND
    if !(which tree):
        $FZF_ALT_C_OPTS = "--preview 'tree -C {} | head -200'"


def _tmux(args):
    if proc := !(tmux ls err>/dev/null):
        tmux attach -t @($(tmux ls).split(":")[0])
    else:
        tmux @(args)
aliases['tm'] = _tmux

def _kak(args):
    git_dir = Path($(git rev-parse --show-toplevel).strip()).name.replace(".", "")
    cur_dir = Path($(pwd).strip()).name.replace(".", "")
    if !(jobs | grep -q 'kak'):
        fg @(re.search(r'\[(\d+)\].*kak', $(jobs)).group(1))
    elif !(kak -l | grep -q @(f'^{git_dir}$')):
        kak -c @(git_dir) @(args)
    elif !(kak -l | grep -q @(f'^{cur_dir}$')):
        kak -c @(cur_dir) @(args)
    else:
        kak -s @(cur_dir) @(args)
aliases['e'] = _kak


# https://xon.sh/xontribs.html
XONTRIBS = {
    "apt_tabcomplete": "xonsh-apt-tabcomplete",
    #"argcomplete": "xontrib-argcomplete",
    "autovox": None,
    "back2dir": "xontrib-back2dir",
    "broot": "xontrib-broot",
    "cmd_done": "xontrib-cmd-durations",
    "coreutils": None,
    "docker_tabcomplete": "xonsh-docker-tabcomplete",
    "fzf-widgets": "xontrib-fzf-widgets",
    "hist_navigator": "xontrib-hist-navigator",
    "output_search": "xontrib-output-search",
    "pdb": None,
    "pipeliner": "xontrib-pipeliner",
    "prompt_ret_code": None,
    "readable-traceback": "xontrib-readable-traceback",
    "ssh_agent": "xontrib-ssh-agent",
    "vox": None,
    "whole_word_jumping": None,
    "xog": None,
    "z": "xontrib-z",
}

# xontrib output_search
$XONTRIB_OUTPUT_SEARCH_KEY='i'

# xontrib fzf-widgets
$fzf_history_binding = "c-r"
$fzf_ssh_binding = "c-s"
$fzf_file_binding = "c-t"
#$fzf_dir_binding = "c-g"

# xontrib autovox
@events.autovox_policy
def env_policy(path, **_):
    for name in {"requirements.txt", "setup.py", "src/requirements.txt"}:
        if path.joinpath(name).exists():
            return path.name
aliases["vox-new"] = lambda args: $[vox new -a @(args) @(pf"{$(pwd).strip()}".name)]

xontrib load @(XONTRIBS.keys())
aliases["xontribs"] = "xpip install -U @(XONTRIBS.values()); xontrib load @(XONTRIBS.keys())"

execx($(cat ~/.xonshrc_local))
