# Theme
colorscheme zenburn
addhl global/ show-matching
addhl global/ number-lines -hlcursor
addhl global/ wrap -word -marker "…"
addhl global/ show-whitespaces -tab "»" -tabpad " " -lf " " -spc " " -nbsp "·"

# UI
set-option -add global ui_options "ncurses_assistant=off"
set-option -add global ui_options "ncurses_set_title=true"
set-option -add global ui_options "ncurses_enable_mouse=false"

# Search highlighting
set global incsearch true

# Case-insensitive search
map -docstring 'Case-insensitive search' global user '/' /(?i)
map -docstring 'Case-insensitive reverse search' global user '<a-/>' <a-/>(?i)
map -docstring 'Case-insensitive search (extend)' global user '?' ?(?i)
map -docstring 'Case-insensitive reverse search (extend)' global user '<a-?>' <a-?>(?i)

# Simple file finder
define-command -docstring 'find <file>: find a file' \
    -params 1 \
    -shell-candidates %{ find * -type f } \
    find %{
        edit %arg{1}
    }
alias global f find

# Git file finder
define-command -docstring 'gitf <pattern>: git file finder' \
    -params 1 \
    -shell-candidates %{ git ls-files } \
    gitf %{
        edit %arg{1}
    }

# FZF file finder
define-command -docstring 'fzf: FZF file invocation' \
    -params 0 \
    fzf-file %{ evaluate-commands %sh{
        if [ -z "$TMUX" ]; then
            echo "echo -markup \"{Error}Only works inside tmux\""
            exit
        fi
        f=$(find * -type f | fzf-tmux -d 20%)
        if [ -n "$f" ]
        then
            printf 'edit %%{%s}\n' $f
        fi
    }}
map global normal <c-f> ':fzf-file<ret>'

# FZF buffer finder
define-command -docstring 'fzf: FZF buffer invocation' \
    -params 0 \
    fzf-buffer %{ evaluate-commands %sh{
        if [ -z "$TMUX" ]; then
            echo "echo -markup \"{Error}Only works inside tmux\""
            exit
        fi
        b=$(echo "$kak_buflist" | tr ' ' '\n' | tr -d "'" | fzf-tmux -d 20%)
        if [ -n "$b" ]
        then
            printf 'buffer %s\n' $b
        fi
    }}
map global normal <c-b> ':fzf-buffer<ret>'

# Show trailing whitespaces
addhl global/ dynregex "[^\S\n]+$" 0:black,red

# Strip trailing whitespaces
define-command -docstring 'strip-tws: strip trailing whitespaces' \
    -params 0 \
    strip-tws %{
        exec -draft %{ %s[^\S\n]+$<ret>d }
    }

# kakoune-cscope mappings
map -docstring 'Cscope menu' global user 'c' '<a-i>w:cscope-menu<ret>'

# Search with Ag
set-option global grepcmd 'ag --vimgrep'
map global normal <c-k> '<a-i>w:grep <c-r>.<ret>'

# Indent when tab is pressed
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'

# Fold selection
map -docstring 'Fold selection at 80 columns' global user 'w' '|fold -s | sed "s/\s*$//"<ret>gh'

# Go is indented with tabs
hook global WinSetOption filetype=go %{
    set-option window indentwidth 0
}

# Shell is indented with tabs
hook global WinSetOption filetype=sh %{
    set-option window indentwidth 0
}

# Tab cycles through completions
hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# Enable LSP if it is available
evaluate-commands %sh{
    kak-lsp --kakoune -s $kak_session
    echo map global view i "<esc>:lsp-hover<ret>" -docstring "\"display info\""
}

# Open directories directly
ranger-open-on-edit-directory
